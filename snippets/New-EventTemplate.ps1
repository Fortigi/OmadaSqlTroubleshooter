[CmdletBinding()]
PARAM(
    [parameter(Mandatory = $true, Position = 0, ParameterSetName = 'Force')]
    [parameter(Mandatory = $true, Position = 0, ParameterSetName = 'Append')]
    [string]$Name,
    [parameter(Mandatory = $false, Position = 1, ParameterSetName = 'Force')]
    [parameter(Mandatory = $false, Position = 1, ParameterSetName = 'Append')]
    [string]$FormName = "MainWindowForm",
    [parameter(Mandatory = $false, Position = 3, ParameterSetName = 'Force')]
    [parameter(Mandatory = $false, Position = 3, ParameterSetName = 'Append')]
    [regex]$Filter,
    [parameter(Mandatory = $false, Position = 4, ParameterSetName = 'Force')]
    [parameter(Mandatory = $false, Position = 4, ParameterSetName = 'Append')]
    [validateScript({ Test-Path $_ -PathType Container })]
    [string]$OutputPath = (Join-Path (Split-Path -Path $PSScriptRoot) -ChildPath "src\lib\events"),
    [parameter(Mandatory = $false, Position = 5, ParameterSetName = 'Force')]
    [switch]$Force,
    [parameter(Mandatory = $false, Position = 6, ParameterSetName = 'Append')]
    [switch]$Append
)

DynamicParam {
    Add-Type -AssemblyName PresentationFramework

    $Controls = [Reflection.Assembly]::Load("PresentationFramework").GetTypes() | Where-Object { $_.Namespace -eq 'System.Windows.Controls' -and $_.IsPublic }

    $AttributeCollection = New-Object System.Management.Automation.ParameterAttribute
    $AttributeCollection.Mandatory = $true
    $AttributeCollection.Position = 2

    $ValidateSet = New-Object System.Management.Automation.ValidateSetAttribute($Controls.Name)

    $RuntimeParameter = New-Object System.Management.Automation.RuntimeDefinedParameter(
        'ControlType',
        [string],
        [System.Collections.ObjectModel.Collection[System.Attribute]]@(
            $AttributeCollection, $ValidateSet
        )
    )

    $RuntimeParameters = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary
    $RuntimeParameters.Add('ControlType', $RuntimeParameter)
    return $RuntimeParameters
}

process {
    $ControlType = $PSBoundParameters['ControlType']

    $ControlType = [Reflection.Assembly]::Load("PresentationFramework").GetTypes() |
    Where-Object { $_.Namespace -eq 'System.Windows.Controls' -and $_.Name -eq $ControlType }

    $Events = $ControlType.GetEvents()

    if ($Events.Count -eq 0) {
        "No events found for control: '{0}'" -f $Name | Write-Error
        return
    }

    $ControlOutputName = "{0}{1}" -f $ControlType.Name, $Name
    $FileName = "{0}.Elements.{1}.ps1" -f $FormName, $ControlOutputName
    $FullPath = Join-Path -Path $OutputPath -ChildPath $FileName

    if (!$Append -and !$Force -and (Test-Path $FullPath -PathType Leaf)) {
        "File exists at '{0}'. Use -Force to overwrite!" -f $FullPath | Write-Error
        return
    }

    if (!$Append) {
        "<#
    Generated by New-EventTemplate.ps1 on '{0}:
    - Control: '{1}'
    - Form: '{2}'
    - ControlType: '{3}'
#>`n`n" -f (Get-Date).ToString("o"), $Name, $FormName, $ControlType.Name | Set-Content -Path $FullPath -Encoding utf8 -Force
    }
    else {
        $FileContent = Get-Content $FullPath
    }

    $Output = $null

    $EventsCount = ($Events | Measure-Object).Count
    if (![string]::IsNullOrWhiteSpace($Filter)) {
        $Events = $Events | Where-Object { $_.Name -match $Filter }
        "{0} of {1} events filtered" -f ($EventsCount - ($Events | Measure-Object).Count), $EventsCount | Write-Host -ForegroundColor Cyan
    }

    $EventsProcessed = 0
    $Events | ForEach-Object {
        $Added = $true
        ("`$Script:{0}.Elements.{1}.{2}" -f $FormName, $ControlOutputName, $_.AddMethod.Name), ("`$Script:{0}.Elements.{1}.{2}" -f $FormName, $ControlOutputName, $_.RemoveMethod.Name) | ForEach-Object {
            $EventVariable = $_

            if ($Append -and (($FileContent -match ($EventVariable).TrimStart('$') | Measure-Object).Count -gt 0)) {
                "Event '{0}' already exists " -f $EventVariable | Write-Host -ForegroundColor Yellow
                $Added = $false
                return
            }
            $Output += "`n`# Uncomment when event is used`n`#{0}({{`n`#`t`t`$_ | Show-EventInfo -LogType VERBOSE2`n`#`t}})`n" -f $EventVariable
            "Event '{0}' added" -f $EventVariable | Write-Host -ForegroundColor Green
            $Added = $true
            $EventsProcessed++
        }
    }
    if($EventsProcessed -gt 0){
        $Output | Out-File -Path $FullPath -Encoding utf8 -Append:$Append -Force
        "Events for control '{0}' written to '{1}'" -f $Name, $FullPath | Write-Host -ForegroundColor Green
    }
    else{
        "No events added for control '{0}'" -f $Name | Write-Host -ForegroundColor Yellow
    }
}


